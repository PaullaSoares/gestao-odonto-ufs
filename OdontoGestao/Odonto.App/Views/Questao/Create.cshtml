@model Odonto.Core.Models.Questao

@{
    ViewData["Title"] = "Criar Questão";
}

<script src="https://cdn.quilljs.com/1.0.0/quill.js"></script>
<script src="~/lib/jquery/dist/jquery.min.js"></script>

@Html.AntiForgeryToken()

<div class="internal-page-content">
    <div class="internal-page-form">
        @using (Html.BeginForm("Create", "Questao", new { ReturnUrl = ViewBag.ReturnUrl }, FormMethod.Post, null, new { @id = "form-input" }))
        {
            @Html.AntiForgeryToken()
            <div class="form-horizontal">
                <h4>Criar Questão</h4>
                <hr />

                <div hidden>
                    @Html.TextBoxFor(m => m.TextoPergunta, new { @class = "control-borderless-button", @placeholder = "Pergunta" })
                </div>
                
                <div hidden>
                    @Html.TextBoxFor(m => m.HtmlPergunta, new { @class = "control-borderless-button", @placeholder = "HTML Pergunta" })
                </div>

                <div id="editor-container"></div>

                @Html.TextBoxFor(m => m.Resposta, new { @class = "control-borderless-button", @placeholder = "Reposta" })

                <div class="form-group">
                    <div class="col-md-12 nopadding-right">
                        @Html.LabelFor(model => model.Exercicio, htmlAttributes: new { @class = "control-label col-md-2" })
                        @Html.DropDownListFor(x => x.ExercicioId, (IEnumerable<SelectListItem>)ViewBag.Exercicios, htmlAttributes: new { @class = "form-control" })

                        <!--<button type="button" class="add-button-modal details" data-toggle="modal" data-target="#CriarTopico">
                            <span class="glyphicon glyphicon-plus"></span>
                        </button>-->

                    </div>
                </div>

                <div class="col-md-12 nopadding-right">
                    <input value="Salvar" type="submit" class="btn btn-primary pull-right mb-xl" />
                </div>
            </div>
        }
    </div>
</div>

<!-- Initialize Quill editor -->
<script>
    var toolbarOptions = [
        ['bold', 'italic', 'underline', 'strike'],        // toggled buttons
        [{ 'align': [] }],

        //[{ 'header': 1 }, { 'header': 2 }],               // custom button values
        [{ 'list': 'ordered' }, { 'list': 'bullet' }],
        [{ 'script': 'sub' }, { 'script': 'super' }],      // superscript/subscript
        [{ 'indent': '-1' }, { 'indent': '+1' }],          // outdent/indent
        [{ 'direction': 'rtl' }],                         // text direction

        [{ 'header': [1, 3, false] }],

        [{ 'color': [] }],          // dropdown with defaults from theme
        ['blockquote'],
        ['link', 'image', 'video'],
        ['clean']                                         // remove formatting button
    ];

    var Font = Quill.import('formats/font');
    Font.whitelist = ['roboto'];
    Quill.register(Font, true);

    var editor = new Quill('#editor-container', {
        modules: { toolbar: toolbarOptions },
        placeholder: 'Pergunta',
        theme: 'snow'
    });

    var form = document.querySelector('#form-input');

    form.onsubmit = function () {
        // Populate hidden form on submit
        var html = document.querySelector('#HtmlPergunta');
        html.value = JSON.stringify(editor.root.innerHTML);

        var texto = document.querySelector('#TextoPergunta');
        texto.value = JSON.stringify(editor.getContents());
        return true;
    };

    /*$(function () {
        $(".details").click(function () {
            var id = $(this).attr("data-id");
            $("#CriarTopico").load("/Topico/CreateModal",
                function () {
                    $("#CriarTopico").modal('show');
                });
        });
    });*/

</script>

@section Scripts {
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}
}
